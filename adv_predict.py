from keras.models import load_model
import sys
import warnings
import os
from math import log
import numpy as np
import scipy as sp
from PIL import Image
Image.MAX_IMAGE_PIXELS = None
warnings.simplefilter('ignore', Image.DecompressionBombWarning)
warnings.simplefilter('error', Image.DecompressionBombWarning)
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.metrics import accuracy_score
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import StratifiedKFold
from PIL import Image
#Load model
from keras.models import Sequential
from keras.optimizers import SGD
from keras.utils import np_utils
from keras.preprocessing import image
from keras.layers import Input, Dense
from keras.models import Model
from keras.layers import Dropout, Flatten, Dense, Conv1D, Conv2D, Activation, MaxPooling2D, GlobalMaxPooling1D, GlobalMaxPooling2D, Input, Embedding, Multiply, MaxPooling1D,GlobalAveragePooling2D, GlobalAveragePooling1D
model = load_model('detection_model.h5')
model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.01,momentum=0.9,nesterov=True,decay=1e-6), metrics=['accuracy'])
# summarize model.
model.summary()
# image folder
#folder_path = 'F:\\Work\\bm3d_images\\adversarial\\'
folder_path = 'F:\\Work\\adv_new\\'
# dimensions of images
img_width, img_height = 224, 224
# load all images into a list
"""
images = []
for img in os.listdir(folder_path):
    img = os.path.join(folder_path, img)
    #img = image.load_img(img, target_size=(img_width, img_height))
   #img = image.img_to_array(img)
    img = np.expand_dims(img, axis=0)
    images.append(img)
# stack up images list to pass for prediction
images = np.vstack(images)
classes = model.predict(images, batch_size=10)
print(classes)
"""
from sklearn import metrics
from sklearn.metrics import accuracy_score
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import StratifiedKFold
from keras.preprocessing.image import ImageDataGenerator
#test_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator()
testing = test_datagen.flow_from_directory(directory=folder_path, target_size=(224,224),color_mode="grayscale",batch_size=3000)
testing.class_indices
imgs, labels = next(testing)
print(imgs.shape)
print(labels.shape)
imgs = imgs/255
# evaluate model
nb_images = 2341
batch_size=30
loss = model.evaluate(imgs,labels)
print('Final CNN test_accuracy: ', loss[1])
# make a prediction
#yhat = model.predict_generator(imgs,steps = nb_images/batch_size,verbose=0)
#yhat = model.predict(imgs)
#print(yhat)
y_pred = np.argmax(model.predict(imgs), axis=-1)
y_test2 = np.argmax(labels, axis=1)
c_matrix = metrics.confusion_matrix(y_test2, y_pred)
report = metrics.classification_report(y_test2, y_pred)
acc = metrics.accuracy_score(y_test2, y_pred)
print(acc)
print(report)
print(c_matrix)
